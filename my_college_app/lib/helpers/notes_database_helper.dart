import '/models/notes_entry.dart';

import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

class NotesDatabase {
  NotesDatabase._init();
  // calling the constructor
  static final NotesDatabase instance = NotesDatabase._init();

  static Database _database;

  // Opening a database
  Future<Database> get database async {
    if (_database != null) return _database;
    _database = await _initDB('notes.db');
    return _database;
  }

  // initializing the database if not exists
  Future<Database> _initDB(String filePath) async {
    final dbPath =
        await getDatabasesPath(); // gives the location of app, instead we can also use,
    // Path Provider to store in appdirectory.
    final path = join(dbPath, filePath);
    return await openDatabase(
      path,
      version: 1,
      onCreate: _createDB, // onUpgrade can help in
      //altering/updating table structure or when version number is changed.
    );
  }

  Future _createDB(Database db, int version) async {
    await db.execute('''
    CREATE TABLE $tableNotes(
      ${NoteFields.id} INTEGER PRIMARY KEY AUTOINCREMENT,
      ${NoteFields.title} TEXT,
      ${NoteFields.desc} TEXT,
      ${NoteFields.dateTime} TEXT
    )
    ''');
  }

  Future<Note> create(Note note) async {
    final db = await instance.database;
    final id = await db.insert(tableNotes, note.toJson());
    return note.copy(id: id); // autogenerated id is stored in 'id' then that is
    // stored for which we copy whole note instance.
  }

  Future<Note> readNote(int id) async {
    final db = await instance.database;

    final maps = await db.query(
      tableNotes,
      columns: NoteFields.values, // here we give all the columns which we
      // want to retrieve.
      where:
          '${NoteFields.id} = ?', // instead of '?' we can directly put id here ($id like this)
      // but it is not secure as it doesn't prevent sql injections attack(hacking kinda stuff)
      whereArgs: [
        id
      ], // add another '?' above and here the other column for extra args
    );

    if (maps.isNotEmpty) {
      return Note.fromJson(maps.first);
    } else {
      throw Exception(
          'ID $id not found'); // can return null and also need to add Future<Note?> as returntype.
    }
  }

  Future<List<Note>> readAllNotes() async {
    final db = await instance.database;

    final orderBy = '${NoteFields.dateTime} DESC';
    final result = await db.query(tableNotes, orderBy: orderBy);

    return result.map((json) => Note.fromJson(json)).toList();
  }

  Future<int> update(Note note) async {
    final db = await instance.database;

    return db.update(
      tableNotes,
      note.toJson(),
      where: '${NoteFields.id} = ?',
      whereArgs: [note.id],
    );
  }

  Future<int> delete(int id) async {
    final db = await instance.database;

    return db.delete(
      tableNotes,
      where: '${NoteFields.id} = ?',
      whereArgs: [id],
    );
  }

  Future close() async {
    // first getting the reference/so and then closing the database using that.
    final db = await instance.database;
    db.close();
  }
}
